import { useState } from 'react'

// Animation demo component showcasing MCP Motion server capabilities
interface DemoBoxProps {
  title: string
  description: string
  animationStyle: React.CSSProperties
  triggerKey: number
}

const DemoBox: React.FC<DemoBoxProps> = ({
  title,
  description,
  animationStyle,
  triggerKey,
}) => {
  return (
    <div className="bg-white rounded-lg shadow-lg p-6 m-4 max-w-sm">
      <h3 className="text-lg font-semibold mb-2 text-gray-800">{title}</h3>
      <p className="text-sm text-gray-600 mb-4">{description}</p>
      <div className="flex justify-center">
        <div
          key={triggerKey}
          className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg"
          style={animationStyle}
        />
      </div>
    </div>
  )
}

export const AnimationDemo: React.FC = () => {
  const [triggerKey, setTriggerKey] = useState(0)

  const triggerAnimations = () => {
    setTriggerKey((prev) => prev + 1)
  }

  // Generate different spring animations using MCP Motion server results
  const springAnimations = [
    {
      title: 'Quick Spring',
      description: '0.2s duration, 0.1 bounce - Snappy and responsive',
      style: {
        animation: `slideIn 200ms linear(0, 0.5904, 0.9599, 1.0152, 1.0062, 1.0006, 1)`,
      },
    },
    {
      title: 'Medium Spring',
      description: '0.4s duration, 0.25 bounce - Balanced feel',
      style: {
        animation: `slideIn 550ms linear(0, 0.1719, 0.4986, 0.7952, 0.9887, 1.0779, 1.0939, 1.0726, 1.0412, 1.0148, 0.9986, 0.9919, 0.9913, 0.9937, 0.9967, 0.999, 1.0003, 1)`,
      },
    },
    {
      title: 'Bouncy Spring',
      description: '0.6s duration, 0.4 bounce - Playful and elastic',
      style: {
        animation: `slideIn 1050ms linear(0, 0.0726, 0.2529, 0.4862, 0.7259, 0.9371, 1.0986, 1.2019, 1.2488, 1.2485, 1.2141, 1.1597, 1.0983, 1.0403, 0.9928, 0.9595, 0.9409, 0.9356, 0.9406, 0.9524, 0.9675, 0.983, 0.9964, 1.0067, 1.0132, 1.0161, 1.016, 1.0137, 1.0101, 1.0062, 1.0025, 0.9994, 0.9973, 0.9962, 1)`,
      },
    },
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 py-8">
      <div className="container mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            MCP Motion Animation Demo
          </h1>
          <p className="text-lg text-gray-600 mb-6">
            Interactive demonstrations of CSS animations generated by the MCP
            Motion server
          </p>
          <button
            onClick={triggerAnimations}
            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
          >
            Trigger All Animations
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          {springAnimations.map((anim, index) => (
            <DemoBox
              key={index}
              title={anim.title}
              description={anim.description}
              animationStyle={anim.style}
              triggerKey={triggerKey}
            />
          ))}
        </div>

        <div className="bg-white rounded-lg shadow-lg p-8 mx-4">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">
            Bounce Animation
          </h2>
          <p className="text-gray-600 mb-6">
            A complex bounce effect with realistic physics simulation using the
            bounce easing function.
          </p>
          <div className="flex justify-center">
            <div
              key={`bounce-${triggerKey}`}
              className="w-20 h-20 bg-gradient-to-br from-red-500 to-orange-600 rounded-full"
              style={{
                animation: `bounce 2000ms linear(0, 0.0008, 0.0031, 0.0069, 0.0123, 0.0193, 0.0278, 0.0378, 0.0494, 0.0625, 0.0772, 0.0934, 0.1111, 0.1304, 0.1512, 0.1736, 0.1975, 0.223, 0.25, 0.2785, 0.3086, 0.3403, 0.3735, 0.4082, 0.4444, 0.4823, 0.5216, 0.5625, 0.6049, 0.6489, 0.6944, 0.7415, 0.7901, 0.8403, 0.892, 0.9452, 1, 0.973, 0.9475, 0.9236, 0.9012, 0.8804, 0.8611, 0.8434, 0.8272, 0.8125, 0.7994, 0.7878, 0.7778, 0.7693, 0.7623, 0.7569, 0.7531, 0.7508, 0.75, 0.7508, 0.7531, 0.7569, 0.7623, 0.7693, 0.7778, 0.7878, 0.7994, 0.8125, 0.8272, 0.8434, 0.8611, 0.8804, 0.9012, 0.9236, 0.9475, 0.973, 1, 0.9869, 0.9753, 0.9653, 0.9568, 0.9498, 0.9444, 0.9406, 0.9383, 0.9375, 0.9383, 0.9406, 0.9444, 0.9498, 0.9568, 0.9653, 0.9753, 0.9869, 1, 0.9938, 0.9892, 0.9861, 0.9846, 0.9846, 0.9861, 0.9892, 0.9938, 1)`,
              }}
            />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-lg p-8 mx-4 mt-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            How It Works
          </h2>
          <div className="space-y-4 text-gray-600">
            <p>
              These animations are powered by your MCP Motion server, which
              generates precise CSS
              <code className="bg-gray-100 px-2 py-1 rounded mx-1">
                linear()
              </code>{' '}
              easing functions.
            </p>
            <p>
              The spring animations use parameters like <strong>bounce</strong>{' '}
              (0-1) and
              <strong> duration</strong> (in seconds) to create natural-feeling
              motion that mimics real-world physics.
            </p>
            <p>
              The bounce animation simulates a ball dropping and bouncing with
              decreasing amplitude, creating a realistic bouncing effect.
            </p>
          </div>
        </div>
      </div>

      <style>{`
        @keyframes slideIn {
          from {
            transform: translateX(-100px);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }

        @keyframes bounce {
          from {
            transform: translateY(-200px);
          }
          to {
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  )
}
